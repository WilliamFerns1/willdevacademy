*, *::before, *::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  font-size: 62.5%;
  font-family: "Poppins", sans-serif;
}

body {
  width: 100vw;
  min-height: 100vh;
  background-image: radial-gradient(#021027, #000000);
  color: #fff;
  vertical-align: center;
}

a {
  color: #fff;
  text-decoration: none;
  font-size: 1.3rem;
  font-weight: 600;
  transition: 0.5s ease-in-out;
}

nav a:hover {
  /* transform: scale(1.05); */
  font-size: 1.35rem;
  color: red;
}

p, h1, h2 {
  width: fit-content;
}

header {
  display: flex;
  align-items: center;
  /* justify-content: space-between; */
  min-height: 10vh;
  vertical-align: middle;
  height: fit-content;
  /* border-bottom: 1px solid #fff; */
  padding: 10px 75px;
  color: #fff;
}

.logo {
  display: flex;
  align-items: center;
  gap: 15px;
}

.logo img {
  width: 35px;
  transition: 0.5s ease-in-out;
}

.logo img:hover {
  margin-right: 10px;
  transform: rotate(30deg);
}

.logo h3 {
  font-size: 1.6rem;
}

.right-header {
  display: flex;
  align-items: center;
  gap: 50px;
}

nav {
  margin: 0 auto;
}


nav, .nav-buttons {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 20px;
}

.log-in-nav-btn {
}

.get-started-nav-btn {
  padding: 7.5px 20px;
  background-color: orangered;
  border: none;
  border-radius: 4px;
  color: #fff;
  font-weight: 550;
  cursor: pointer;
}

.hero {
  display: flex;
  flex-direction: column;
  gap: 10px;
  align-items: center;
  justify-content: center;
  min-height: 80vh;
  text-align: center;
}

.title-container {
  display: inline-block;
}

.hero-title {
  font-size: 6rem;
  line-height: 6.5rem;
  margin-left: 15px;
  vertical-align: middle;
  border-right: 20px solid #fff;
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  animation: 
    typing 1s steps(22),
    cursor .4s step-end infinite alternate;
  background-image: linear-gradient(45deg, yellow, orange);
  background-size: 100%;
  -webkit-background-clip: text;
  -moz-background-clip: text;
  -webkit-text-fill-color: transparent; 
  -moz-text-fill-color: transparent;
}

@keyframes cursor {
  50% { border-color: transparent }
}

@keyframes typing {
  from { width: 0 }
}

.hero-description {
  max-width: 550px;
  font-size: 1.5rem;
  font-weight: 600;
}

.get-started-hero-btn {
  padding: 10px 25px;
  background-color: orangered;
  border: none;
  color: #fff;
  border-radius: 5px;
  font-weight: bold;
  font-size: 1.75rem;
  margin-top: 15px;
  cursor: pointer;
}

.particle-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: -1;  // Ensures it stays behind all other content
  pointer-events: none;  // Prevents the container from capturing mouse events
}

.circle-container {
  $particleWidth: 10px;
  $particleNum: 200;
  $particleColor: hsl(180, 100%, 80%);

  position: absolute;
  transform: translateY(-10vh);
  animation-iteration-count: infinite;
  animation-timing-function: linear;

  .circle {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    mix-blend-mode: screen;
    background-image: radial-gradient(
      hsl(180, 100%, 80%),
      hsl(180, 100%, 80%) 10%,
      hsla(180, 100%, 80%, 0) 56%
    );

    animation: fadein-frames 200ms infinite, scale-frames 2s infinite;

    @keyframes fade-frames {
      0% {
        opacity: 1;
      }

      50% {
        opacity: 0.7;
      }

      100% {
        opacity: 1;
      }
    }

    @keyframes scale-frames {
      0% {
        transform: scale3d(0.4, 0.4, 1);
      }

      50% {
        transform: scale3d(2.2, 2.2, 1);
      }

      100% {
        transform: scale3d(0.4, 0.4, 1);
      }
    }
  }

  @for $i from 1 through $particleNum {
    &:nth-child(#{$i}) {
      $circleSize: random($particleWidth);
      width: $circleSize + px;
      height: $circleSize + px;

      $startPositionY: random(10) + 100;
      $framesName: "move-frames-" + $i;
      $moveDuration: 7000 + random(4000) + ms;

      animation-name: #{$framesName};
      animation-duration: $moveDuration;
      animation-delay: random(11000) + ms;

      @keyframes #{$framesName} {
        from {
          transform: translate3d(
            #{random(100) + vw},
            #{$startPositionY + vh},
            0
          );
        }
        
        to {
          transform: translate3d(
            #{random(100) + vw},
            #{- $startPositionY - random(30) + vh},
            0
          );
        }
      }

      .circle {
        animation-delay: random(4000) + ms;
      }
    }
  }
}



